<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Software development notes</title>
    <description>Notes on my daily work as a software developer.</description>
    <link>/</link>
    <atom:link href="/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Thu, 03 Mar 2016 00:40:36 +0700</pubDate>
    <lastBuildDate>Thu, 03 Mar 2016 00:40:36 +0700</lastBuildDate>
    <generator>Jekyll v3.1.2</generator>
    
      <item>
        <title>Visitor pattern</title>
        <description>&lt;h1 id=&quot;intent&quot;&gt;Intent&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;Defines new operations for a class hierarchy &lt;em&gt;without&lt;/em&gt; modifying the hierarchy.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;structure&quot;&gt;Structure&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;/assets/imgs/patterns/design-patterns/visitor/structure.png&quot; alt=&quot;visitor-pattern-structure&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;In the diagram, the accept(Visitor v) method just simply calls v.visit(this), which will implement the necessary operation on the given Component. This is the /double dispatch/ technique, in which the result of the call depends on the request and the types of /two/ receivers.&lt;/li&gt;
  &lt;li&gt;New operations for the Component class hierarchy can be created by adding new Visitors, which means that we don’t need to modify the Component class hierarchy to define its new operations.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;applicability&quot;&gt;Applicability&lt;/h1&gt;

&lt;p&gt;This pattern should be used when:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The class hierarchy rarely changes, while its operations usually does. This is because adding new operations is quite simple as we only need to add new visitors. On the other hand, adding new class into the hierarchy will make us to add new visit() method to the Visitor interface, which means we have to change all the exisiting visitors.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;risk&quot;&gt;Risk&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;The pattern is quite complicated to understand, which means that applying this pattern might make other team members find it hard to understand the code, especially when they see the code for the first time.&lt;/li&gt;
  &lt;li&gt;If this pattern is used with the Composite pattern and the Composite contains a cycle in it, then the accept-visit loop might be repeated forever.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;reference&quot;&gt;Reference&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;Visitor, GOF book&lt;/li&gt;
  &lt;li&gt;Visitor, Chapter 29, Design Patterns In Java&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Thu, 03 Mar 2016 00:00:00 +0700</pubDate>
        <link>/visitor/</link>
        <guid isPermaLink="true">/visitor/</guid>
        
        <category>visitor</category>
        
        
        <category>patterns</category>
        
      </item>
    
      <item>
        <title>Strategy pattern</title>
        <description>&lt;h1 id=&quot;intent&quot;&gt;Intent&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;Defines a family of algorithms (or strategies) /and/ encapsulates them from the clients.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;structure&quot;&gt;Structure&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;/assets/imgs/patterns/design-patterns/strategy/structure.png&quot; alt=&quot;strategy-pattern-structure&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Each strategy is encapsulated in each own class.&lt;/li&gt;
  &lt;li&gt;The clients are insulated from the strategy details, and only need to know which strategy it should use.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;applicability&quot;&gt;Applicability&lt;/h1&gt;

&lt;p&gt;Use this pattern when:
- There are multiple variants of an algorithm and you want to decouple the client from the algorithm details. The reasons for decoupling might be that you don’t want to complicate the client, or the algorithm needs some data that the client cannot reach, or it’s more likely that the algorithm details will change and you don’t want the change to affect the client.
- A conditional statement appears /multiple/ times, and you want to replace them by using polymorphism with the strategy hierarchy.&lt;/p&gt;

&lt;h1 id=&quot;risk&quot;&gt;Risk&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;Might complicate the code base, as this pattern needs a new class hierarchy.&lt;/li&gt;
  &lt;li&gt;Increased number of objects.&lt;/li&gt;
  &lt;li&gt;It’s not gonna be easy to design the strategy interface in case the algorithm variants needs different kinds of input. For example, when adding a new strategy to an existing strategy hierarchy and that new one needs more data than the existing ones, then either we have to change the whole strategy interface or we have to introduce the new data to the strategy request (if it’s an DTO).&lt;/li&gt;
  &lt;li&gt;There might be communication overhead for certain algorithms which do not make use of all the input data, which is defined to satisfy /all/ the algorithms.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;reference&quot;&gt;Reference&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;Strategy, GOF book&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Thu, 03 Mar 2016 00:00:00 +0700</pubDate>
        <link>/strategy/</link>
        <guid isPermaLink="true">/strategy/</guid>
        
        <category>strategy</category>
        
        
        <category>patterns</category>
        
      </item>
    
      <item>
        <title>Decorator pattern</title>
        <description>&lt;h1 id=&quot;intent&quot;&gt;Intent&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;Attach&lt;/em&gt; additional responsibilities to an object dynamically and transparently.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;structure&quot;&gt;Structure&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;/assets/imgs/patterns/design-patterns/decorator/structure.png&quot; alt=&quot;decorator-pattern-structure&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The Decorator can also be an interface or abstract class.&lt;/li&gt;
  &lt;li&gt;The Decorator conforms to the interface of its decorated Component to make it transparent to the clients of the Component.&lt;/li&gt;
  &lt;li&gt;The Decorator keeps a reference to its decorated Component, so that it can attach additional responsibilities to the object at run-time.&lt;/li&gt;
  &lt;li&gt;The Decorator does not alter the behaviors of its decorated object, but instead it attaches other behaviors to the object. In other words, the Decorator changes the /skin/ of an object, not its /guts/.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;applicability&quot;&gt;Applicability&lt;/h1&gt;

&lt;p&gt;This pattern can be used when:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;You want to add new behaviors to before or after performing an operation of the decorated object.&lt;/li&gt;
  &lt;li&gt;You want to introduce new behaviors but for some reasons you don’t want to do that with inheritance.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;risk&quot;&gt;Risk&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;Because the decorator extends its decorated type, it might be expensive to introduce new decorators if the decorated type is heavy-weight.&lt;/li&gt;
  &lt;li&gt;Even thought the decorator extends its decorated type, the developers must be aware that the decorator does /not/ actually belong to the type hierarchy.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;reference&quot;&gt;Reference&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;Decorator, GOF book&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Thu, 03 Mar 2016 00:00:00 +0700</pubDate>
        <link>/decorator/</link>
        <guid isPermaLink="true">/decorator/</guid>
        
        <category>decorator</category>
        
        
        <category>patterns</category>
        
      </item>
    
      <item>
        <title>Command pattern</title>
        <description>&lt;h1 id=&quot;intent&quot;&gt;Intent&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;Encapsulates a request &lt;em&gt;as&lt;/em&gt; an object.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;structure&quot;&gt;Structure&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;/assets/imgs/patterns/design-patterns/command/structure.png&quot; alt=&quot;command-pattern-structure&quot; /&gt;&lt;/p&gt;

&lt;p&gt;All information needed to carry out the request is encapsulated in the Command object. In other words, the Command objects contain the input data for the request and know how to handle the request.&lt;/p&gt;

&lt;p&gt;The Command objects might handle the requests themselves or delegate the tasks to appropriate Receivers.&lt;/p&gt;

&lt;h1 id=&quot;applicability&quot;&gt;Applicability&lt;/h1&gt;

&lt;p&gt;This pattern can be used when:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;You want to parameterize the request handling, because you can get different handlings by using different Command objects.&lt;/li&gt;
  &lt;li&gt;You want to decouple the request invoker and the request handler. They are decoupled because they don’t know about each other but only about the Command objects which act as intermediate objects between them.&lt;/li&gt;
  &lt;li&gt;The time when the request is created and when it is handled is independent. For example, the time when a request is handled is determined by a queue manager, but the time when it is created is by a client. In this case, you should let the client create a Command object and pass it to the queue manager. Then, when the time comes, the queue manager will simply invoke the Command object to carry out the request.&lt;/li&gt;
  &lt;li&gt;You want to support a set of related operations and you don’t want to scatter them in different places. The most common case is to support both do() and undo() operations in a Command object.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;reference&quot;&gt;Reference&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;Command, GOF book&lt;/li&gt;
  &lt;li&gt;Command, Chaper 24, Design Patterns In Java&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Thu, 03 Mar 2016 00:00:00 +0700</pubDate>
        <link>/command/</link>
        <guid isPermaLink="true">/command/</guid>
        
        <category>command</category>
        
        
        <category>patterns</category>
        
      </item>
    
      <item>
        <title>Java puzzlers</title>
        <description>&lt;h1 id=&quot;expressive-puzzlers&quot;&gt;Expressive Puzzlers&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;Puzzle 2
    &lt;ul&gt;
      &lt;li&gt;Not all decimals can be represented exactly using binary floating-point&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Puzzle 8
    &lt;ul&gt;
      &lt;li&gt;Conditional operator&lt;/li&gt;
      &lt;li&gt;Should always avoid mixed-type computations&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Puzzle 9
    &lt;ul&gt;
      &lt;li&gt;Compound assignment (e.g., a += b) contains an implicit cast&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;puzzlers-with-characters&quot;&gt;Puzzlers with characters&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;Puzzle 13
    &lt;ul&gt;
      &lt;li&gt;String interning&lt;/li&gt;
      &lt;li&gt;Object comparison by equals() and ==&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Puzzle 18
    &lt;ul&gt;
      &lt;li&gt;The conversion between String and byte[] always involves using a specific charset&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;loopy-puzzlers&quot;&gt;Loopy puzzlers&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;Puzzle 25
    &lt;ul&gt;
      &lt;li&gt;Postfix increment operator&lt;/li&gt;
      &lt;li&gt;Do not assign a variable more than once in a single expression&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Puzzle 28
    &lt;ul&gt;
      &lt;li&gt;Infinity&lt;/li&gt;
      &lt;li&gt;Floating-point operations return the floating-point value that is closest to their exact mathematical result.&lt;/li&gt;
      &lt;li&gt;Binary floating point arithmetics in Java&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;exceptional-puzzlers&quot;&gt;Exceptional puzzlers&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;Puzzle 36
    &lt;ul&gt;
      &lt;li&gt;The try statement 14.20 (Java Language Specification Java SE 7 (JLS7))&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Puzzle 37
    &lt;ul&gt;
      &lt;li&gt;Exception checking 11.2.3 (JLS7)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Puzzle 38
    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;Compile-time checking of exceptions 11.2 JLS7&lt;/p&gt;

        &lt;blockquote&gt;
          &lt;p&gt;When interfaces are involved, more than one method declaration may be overridden by a single overriding declaration. In this case, the overriding declaration must have a throws clause that is compatible with all the overridden declarations (§9.4.1).&lt;/p&gt;
        &lt;/blockquote&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Puzzle 39
    &lt;ul&gt;
      &lt;li&gt;The System.exit method halts the execution of the current thread and all others dead in their tracks.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Puzzle 40
    &lt;ul&gt;
      &lt;li&gt;Initialization of classes and interfaces 12.4 JLS7&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Puzzle 42
    &lt;ul&gt;
      &lt;li&gt;
        &lt;table&gt;
          &lt;tbody&gt;
            &lt;tr&gt;
              &lt;td&gt;&amp;amp; and&lt;/td&gt;
              &lt;td&gt;can be used as &amp;amp;&amp;amp; and&lt;/td&gt;
              &lt;td&gt; &lt;/td&gt;
              &lt;td&gt;for boolean values, but they do not support short-circuit evaluation.&lt;/td&gt;
            &lt;/tr&gt;
          &lt;/tbody&gt;
        &lt;/table&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Puzzle 43
    &lt;ul&gt;
      &lt;li&gt;It’s possible that an undeclared exception can be thrown out. Examples:
        &lt;ul&gt;
          &lt;li&gt;newInstance()&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Generics
        &lt;ul&gt;
          &lt;li&gt;Java exception checking is a compile-time facility, not a JVM feature.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;classy-puzzlers&quot;&gt;Classy puzzlers&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;Puzzle 46
    &lt;ul&gt;
      &lt;li&gt;If more than one methods are applicable to an invocation, the most specific one is chosen.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Puzzle 47
    &lt;ul&gt;
      &lt;li&gt;Static fields are shared by their declaring class and any &lt;em&gt;subclasses&lt;/em&gt;.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Puzzle 48
    &lt;ul&gt;
      &lt;li&gt;No dynamic dispatch on static methods (15.12.4.4 JLS7)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Puzzle 49
    &lt;ul&gt;
      &lt;li&gt;The static initializers and class variable initializers are executed in textual order (12.4.1 JLS7)&lt;/li&gt;
      &lt;li&gt;Be very careful of circularity in class initialization&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Puzzle 50
    &lt;ul&gt;
      &lt;li&gt;instanceof and cast operators
        &lt;ul&gt;
          &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;null&lt;/code&gt; is a subtype of every type. However, &lt;code class=&quot;highlighter-rouge&quot;&gt;null instanceof Type&lt;/code&gt; always returns false.&lt;/li&gt;
          &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;instanceof&lt;/code&gt; requires two operands must be in the same hierarchy. Otherwise, there’ll be compile errors.&lt;/li&gt;
          &lt;li&gt;cast operator throws exception at run-time if the types are not convertable.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Puzzle 51
    &lt;ul&gt;
      &lt;li&gt;Be very careful of circularity in class instance initialization&lt;/li&gt;
      &lt;li&gt;Should never call overridable (especially overridden) methods in constructors&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Puzzle 52
    &lt;ul&gt;
      &lt;li&gt;Be consistent: either use eager or lazy initialization, not both&lt;/li&gt;
      &lt;li&gt;Default values are set in the preparation phase, while the field initializers are executed in the initialization phase, which occurs after the preparation phase. For more details, see &lt;a href=&quot;http://docs.oracle.com/javase/specs/jls/se8/html/jls-12.html#jls-12.1&quot;&gt;JVM Startup&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Puzzle 53
    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;From &lt;a href=&quot;http://docs.oracle.com/javase/specs/jls/se8/html/jls-8.html#jls-8.8.7&quot;&gt;JLS8&lt;/a&gt;&lt;/p&gt;

        &lt;blockquote&gt;
          &lt;p&gt;If a constructor body does not begin with an explicit constructor invocation and the constructor being declared is not part of the primordial class Object, then the constructor body implicitly begins with a superclass constructor invocation “super();”&lt;/p&gt;
        &lt;/blockquote&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Private constructor capture pattern&lt;/p&gt;
        &lt;ul&gt;
          &lt;li&gt;Workaround to be able to do both things: passing a value to the superclass constructor, while also storing the value at the class itself. Without this pattern, doing these two things is not possible due to rules on constructors.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Puzzle 54&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Wed, 02 Mar 2016 00:00:00 +0700</pubDate>
        <link>/java-puzzlers/</link>
        <guid isPermaLink="true">/java-puzzlers/</guid>
        
        
        <category>java</category>
        
      </item>
    
      <item>
        <title>Public Key Infrastructure (PKI)</title>
        <description>&lt;h1 id=&quot;overview&quot;&gt;Overview&lt;/h1&gt;

&lt;p&gt;PKI is security infrastructure which provides all necessary services to implement public-key cryptography and thus enables secure communication using public-key cryptography on open networks.&lt;/p&gt;

&lt;h1 id=&quot;main-concepts&quot;&gt;Main concepts&lt;/h1&gt;

&lt;h2 id=&quot;public-key-cryptography&quot;&gt;Public-key cryptography&lt;/h2&gt;

&lt;p&gt;The main idea of public-key cryptography is to use different keys for encryption and decryption. The encryption key is made public and thus also called public key, while the decryption key is kept private and thus also called private key.&lt;/p&gt;

&lt;p&gt;Two important requirements on public-key cryptography are that the encryption function must be a one-way function and that it is infeasible to derive one key from another.&lt;/p&gt;

&lt;p&gt;Public-key cryptosystems use the public key to encrypt messages. The encrypted messages can only be decrypted with the corresponding private keys. Thus, even if the messages are intercepted, the interceptors still cannot know the original messages unless they know the private keys. The main processing flow is as follows [1]:
&lt;img src=&quot;/assets/imgs/pki/public-key-cryptography.png&quot; alt=&quot;public-key-cryptography&quot; title=&quot;public-key-cryptography&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The first and most widely used public-key cryptosystem is RSA, which is named after its inventors Ron Rivest, Adi Shamir, and Leonard Adleman.&lt;/p&gt;

&lt;h2 id=&quot;digital-signatures&quot;&gt;Digital signatures&lt;/h2&gt;

&lt;p&gt;Digital signatures are analogous to hand-written signatures in that they are used to prove the authenticity of a message. The main idea is that then sender uses its private key (which is only known to the sender) to sign the message and the receiver will use the sender’s public key to verify the signature. The process is as follows [2]:
&lt;img src=&quot;/assets/imgs/pki/digital-signature.png&quot; alt=&quot;digital-signature&quot; title=&quot;digital-signature&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It is important to note that the signature must always be associated with the message from which the signature is created.&lt;/p&gt;

&lt;p&gt;The most widely used digital signature is the RSA signature scheme.&lt;/p&gt;

&lt;h2 id=&quot;digital-certificates&quot;&gt;Digital certificates&lt;/h2&gt;

&lt;p&gt;Digital certificates are used to prove the authenticity of public keys by binding public keys to their owners. Without certificates, public-key cryptography can easily be the victim of the man-in-the-middle attacks. For example, if Oscar somehow replaces Alice’s public key by his, then every messages encrypted with the compromised Alice’s public key can be decrypted by Oscar when he intercepts the messages.&lt;/p&gt;

&lt;p&gt;In its simplest form, a certificate looks like this [2]:
&lt;img src=&quot;/assets/imgs/pki/simple-cert.png&quot; alt=&quot;simplest-cert&quot; title=&quot;simple-cert&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The certificate contains the signature which must be signed by a certificate authority. This signature guarantees the integrity of the certificate, which provides the information about the public key and its owner.&lt;/p&gt;

&lt;p&gt;One commonly used certificate standard is X.509.&lt;/p&gt;

&lt;h2 id=&quot;certificate-authority-ca&quot;&gt;Certificate authority (CA)&lt;/h2&gt;

&lt;p&gt;Certificate authorities are trusted third-parties who are responsible for managing the certificates, e.g., issuing and revoking certificates.&lt;/p&gt;

&lt;h1 id=&quot;main-services&quot;&gt;Main services&lt;/h1&gt;

&lt;p&gt;The main services provided by PKI include:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Confidentiality
    &lt;ul&gt;
      &lt;li&gt;Data is protected from unauthorized entities.&lt;/li&gt;
      &lt;li&gt;By public key encryption and private key decryption&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Data integrity
    &lt;ul&gt;
      &lt;li&gt;Data could not be changed by unauthorized entities.&lt;/li&gt;
      &lt;li&gt;By digital signatures&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Authentication
    &lt;ul&gt;
      &lt;li&gt;Involved entities must prove who they are&lt;/li&gt;
      &lt;li&gt;By signing on authentication information&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Data origin authenticity
    &lt;ul&gt;
      &lt;li&gt;The origin of the data must be reliable.&lt;/li&gt;
      &lt;li&gt;By digital certificates and signatures&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Non-repudiation
    &lt;ul&gt;
      &lt;li&gt;Prevents involved entities from denying that they have performed some actions, e.g., some harmful actions.&lt;/li&gt;
      &lt;li&gt;By digital signatures&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;references&quot;&gt;References&lt;/h1&gt;

&lt;p&gt;[1] &lt;a href=&quot;http://www.amazon.com/Introduction-Public-Infrastructures-Johannes-Buchmann/dp/3642406564/ref=sr_1_1?ie=UTF8&amp;amp;qid=1456768775&amp;amp;sr=8-1&amp;amp;keywords=introduction+to+pki&quot;&gt;Introduction to Public Key Infrastructures&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;[2] &lt;a href=&quot;http://www.amazon.com/Understanding-Cryptography-Textbook-Students-Practitioners/dp/3642041000/ref=sr_1_1?s=books&amp;amp;ie=UTF8&amp;amp;qid=1456768821&amp;amp;sr=1-1&amp;amp;keywords=understanding+cryptography+a+textbook+for+students+and+practitioners&quot;&gt;Understanding Cryptography: A Textbook for Students and Practitioners&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;[3] &lt;a href=&quot;http://www.amazon.com/Understanding-PKI-Standards-Deployment-Considerations/dp/0321743091/ref=sr_1_1?ie=UTF8&amp;amp;qid=1456768907&amp;amp;sr=8-1&amp;amp;keywords=understanding+pki&quot;&gt;Understanding PKI: Concepts, Standards, and Deployment Considerations&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Thu, 25 Feb 2016 00:00:00 +0700</pubDate>
        <link>/public-key-infrastructure/</link>
        <guid isPermaLink="true">/public-key-infrastructure/</guid>
        
        
      </item>
    
      <item>
        <title>Enterprise Integration Patterns</title>
        <description>
</description>
        <pubDate>Wed, 24 Feb 2016 00:00:00 +0700</pubDate>
        <link>/enterprise-integration-patterns/</link>
        <guid isPermaLink="true">/enterprise-integration-patterns/</guid>
        
        
        <category>patterns</category>
        
      </item>
    
      <item>
        <title>EJB</title>
        <description>
</description>
        <pubDate>Wed, 24 Feb 2016 00:00:00 +0700</pubDate>
        <link>/ejb/</link>
        <guid isPermaLink="true">/ejb/</guid>
        
        
        <category>java-ee</category>
        
      </item>
    
      <item>
        <title>Programming Pearls</title>
        <description>
</description>
        <pubDate>Wed, 24 Feb 2016 00:00:00 +0700</pubDate>
        <link>/programming-pearls/</link>
        <guid isPermaLink="true">/programming-pearls/</guid>
        
        
        <category>algorithms</category>
        
      </item>
    
      <item>
        <title>Patterns of Enterprise Application Architecture</title>
        <description>
</description>
        <pubDate>Tue, 23 Feb 2016 00:00:00 +0700</pubDate>
        <link>/patterns-of-enterprise-application-architecture/</link>
        <guid isPermaLink="true">/patterns-of-enterprise-application-architecture/</guid>
        
        
        <category>patterns</category>
        
      </item>
    
  </channel>
</rss>
