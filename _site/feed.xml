<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Software development notes</title>
    <description>Notes on my daily work as a software developer.</description>
    <link>/</link>
    <atom:link href="/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Wed, 02 Mar 2016 22:55:54 +0700</pubDate>
    <lastBuildDate>Wed, 02 Mar 2016 22:55:54 +0700</lastBuildDate>
    <generator>Jekyll v3.1.2</generator>
    
      <item>
        <title>Java puzzlers</title>
        <description>&lt;h1 id=&quot;expressive-puzzlers&quot;&gt;Expressive Puzzlers&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;Puzzle 2
    &lt;ul&gt;
      &lt;li&gt;Not all decimals can be represented exactly using binary floating-point&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Puzzle 8
    &lt;ul&gt;
      &lt;li&gt;Conditional operator&lt;/li&gt;
      &lt;li&gt;Should always avoid mixed-type computations&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Puzzle 9
    &lt;ul&gt;
      &lt;li&gt;Compound assignment (e.g., a += b) contains an implicit cast&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;puzzlers-with-characters&quot;&gt;Puzzlers with characters&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;Puzzle 13
    &lt;ul&gt;
      &lt;li&gt;String interning&lt;/li&gt;
      &lt;li&gt;Object comparison by equals() and ==&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Puzzle 18
    &lt;ul&gt;
      &lt;li&gt;The conversion between String and byte[] always involves using a specific charset&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;loopy-puzzlers&quot;&gt;Loopy puzzlers&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;Puzzle 25
    &lt;ul&gt;
      &lt;li&gt;Postfix increment operator&lt;/li&gt;
      &lt;li&gt;Do not assign a variable more than once in a single expression&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Puzzle 28
    &lt;ul&gt;
      &lt;li&gt;Infinity&lt;/li&gt;
      &lt;li&gt;Floating-point operations return the floating-point value that is closest to their exact mathematical result.&lt;/li&gt;
      &lt;li&gt;Binary floating point arithmetics in Java&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;exceptional-puzzlers&quot;&gt;Exceptional puzzlers&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;Puzzle 36
    &lt;ul&gt;
      &lt;li&gt;The try statement 14.20 (Java Language Specification Java SE 7 (JLS7))&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Puzzle 37
    &lt;ul&gt;
      &lt;li&gt;Exception checking 11.2.3 (JLS7)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Puzzle 38
    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;Compile-time checking of exceptions 11.2 JLS7&lt;/p&gt;

        &lt;blockquote&gt;
          &lt;p&gt;When interfaces are involved, more than one method declaration may be overridden by a single overriding declaration. In this case, the overriding declaration must have a throws clause that is compatible with all the overridden declarations (§9.4.1).&lt;/p&gt;
        &lt;/blockquote&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Puzzle 39
    &lt;ul&gt;
      &lt;li&gt;The System.exit method halts the execution of the current thread and all others dead in their tracks.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Puzzle 40
    &lt;ul&gt;
      &lt;li&gt;Initialization of classes and interfaces 12.4 JLS7&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Puzzle 42
    &lt;ul&gt;
      &lt;li&gt;
        &lt;table&gt;
          &lt;tbody&gt;
            &lt;tr&gt;
              &lt;td&gt;&amp;amp; and&lt;/td&gt;
              &lt;td&gt;can be used as &amp;amp;&amp;amp; and&lt;/td&gt;
              &lt;td&gt; &lt;/td&gt;
              &lt;td&gt;for boolean values, but they do not support short-circuit evaluation.&lt;/td&gt;
            &lt;/tr&gt;
          &lt;/tbody&gt;
        &lt;/table&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Puzzle 43
    &lt;ul&gt;
      &lt;li&gt;It’s possible that an undeclared exception can be thrown out. Examples:
        &lt;ul&gt;
          &lt;li&gt;newInstance()&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Generics
        &lt;ul&gt;
          &lt;li&gt;Java exception checking is a compile-time facility, not a JVM feature.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;classy-puzzlers&quot;&gt;Classy puzzlers&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;Puzzle 46
    &lt;ul&gt;
      &lt;li&gt;If more than one methods are applicable to an invocation, the most specific one is chosen.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Puzzle 47
    &lt;ul&gt;
      &lt;li&gt;Static fields are shared by their declaring class and any &lt;em&gt;subclasses&lt;/em&gt;.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Puzzle 48
    &lt;ul&gt;
      &lt;li&gt;No dynamic dispatch on static methods (15.12.4.4 JLS7)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Puzzle 49
    &lt;ul&gt;
      &lt;li&gt;The static initializers and class variable initializers are executed in textual order (12.4.1 JLS7)&lt;/li&gt;
      &lt;li&gt;Be very careful of circularity in class initialization&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Puzzle 50
    &lt;ul&gt;
      &lt;li&gt;instanceof and cast operators
        &lt;ul&gt;
          &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;null&lt;/code&gt; is a subtype of every type. However, &lt;code class=&quot;highlighter-rouge&quot;&gt;null instanceof Type&lt;/code&gt; always returns false.&lt;/li&gt;
          &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;instanceof&lt;/code&gt; requires two operands must be in the same hierarchy. Otherwise, there’ll be compile errors.&lt;/li&gt;
          &lt;li&gt;cast operator throws exception at run-time if the types are not convertable.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Puzzle 51
    &lt;ul&gt;
      &lt;li&gt;Be very careful of circularity in class instance initialization&lt;/li&gt;
      &lt;li&gt;Should never call overridable (especially overridden) methods in constructors&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Puzzle 52
    &lt;ul&gt;
      &lt;li&gt;Be consistent: either use eager or lazy initialization, not both&lt;/li&gt;
      &lt;li&gt;Default values are set in the preparation phase, while the field initializers are executed in the initialization phase, which occurs after the preparation phase. For more details, see &lt;a href=&quot;http://docs.oracle.com/javase/specs/jls/se8/html/jls-12.html#jls-12.1&quot;&gt;JVM Startup&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Puzzle 53
    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;From &lt;a href=&quot;http://docs.oracle.com/javase/specs/jls/se8/html/jls-8.html#jls-8.8.7&quot;&gt;JLS8&lt;/a&gt;&lt;/p&gt;

        &lt;blockquote&gt;
          &lt;p&gt;If a constructor body does not begin with an explicit constructor invocation and the constructor being declared is not part of the primordial class Object, then the constructor body implicitly begins with a superclass constructor invocation “super();”&lt;/p&gt;
        &lt;/blockquote&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Private constructor capture pattern&lt;/p&gt;
        &lt;ul&gt;
          &lt;li&gt;Workaround to be able to do both things: passing a value to the superclass constructor, while also storing the value at the class itself. Without this pattern, doing these two things is not possible due to rules on constructors.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Puzzle 54&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Wed, 02 Mar 2016 00:00:00 +0700</pubDate>
        <link>/java-puzzlers/</link>
        <guid isPermaLink="true">/java-puzzlers/</guid>
        
        
      </item>
    
      <item>
        <title>Public Key Infrastructure (PKI)</title>
        <description>&lt;h1 id=&quot;overview&quot;&gt;Overview&lt;/h1&gt;

&lt;p&gt;PKI is security infrastructure which provides all necessary services to implement public-key cryptography and thus enables secure communication using public-key cryptography on open networks.&lt;/p&gt;

&lt;h1 id=&quot;main-concepts&quot;&gt;Main concepts&lt;/h1&gt;

&lt;h2 id=&quot;public-key-cryptography&quot;&gt;Public-key cryptography&lt;/h2&gt;

&lt;p&gt;The main idea of public-key cryptography is to use different keys for encryption and decryption. The encryption key is made public and thus also called public key, while the decryption key is kept private and thus also called private key.&lt;/p&gt;

&lt;p&gt;Two important requirements on public-key cryptography are that the encryption function must be a one-way function and that it is infeasible to derive one key from another.&lt;/p&gt;

&lt;p&gt;Public-key cryptosystems use the public key to encrypt messages. The encrypted messages can only be decrypted with the corresponding private keys. Thus, even if the messages are intercepted, the interceptors still cannot know the original messages unless they know the private keys. The main processing flow is as follows [1]:
&lt;img src=&quot;/assets/imgs/pki/public-key-cryptography.png&quot; alt=&quot;public-key-cryptography&quot; title=&quot;public-key-cryptography&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The first and most widely used public-key cryptosystem is RSA, which is named after its inventors Ron Rivest, Adi Shamir, and Leonard Adleman.&lt;/p&gt;

&lt;h2 id=&quot;digital-signatures&quot;&gt;Digital signatures&lt;/h2&gt;

&lt;p&gt;Digital signatures are analogous to hand-written signatures in that they are used to prove the authenticity of a message. The main idea is that then sender uses its private key (which is only known to the sender) to sign the message and the receiver will use the sender’s public key to verify the signature. The process is as follows [2]:
&lt;img src=&quot;/assets/imgs/pki/digital-signature.png&quot; alt=&quot;digital-signature&quot; title=&quot;digital-signature&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It is important to note that the signature must always be associated with the message from which the signature is created.&lt;/p&gt;

&lt;p&gt;The most widely used digital signature is the RSA signature scheme.&lt;/p&gt;

&lt;h2 id=&quot;digital-certificates&quot;&gt;Digital certificates&lt;/h2&gt;

&lt;p&gt;Digital certificates are used to prove the authenticity of public keys by binding public keys to their owners. Without certificates, public-key cryptography can easily be the victim of the man-in-the-middle attacks. For example, if Oscar somehow replaces Alice’s public key by his, then every messages encrypted with the compromised Alice’s public key can be decrypted by Oscar when he intercepts the messages.&lt;/p&gt;

&lt;p&gt;In its simplest form, a certificate looks like this [2]:
&lt;img src=&quot;/assets/imgs/pki/simple-cert.png&quot; alt=&quot;simplest-cert&quot; title=&quot;simple-cert&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The certificate contains the signature which must be signed by a certificate authority. This signature guarantees the integrity of the certificate, which provides the information about the public key and its owner.&lt;/p&gt;

&lt;p&gt;One commonly used certificate standard is X.509.&lt;/p&gt;

&lt;h2 id=&quot;certificate-authority-ca&quot;&gt;Certificate authority (CA)&lt;/h2&gt;

&lt;p&gt;Certificate authorities are trusted third-parties who are responsible for managing the certificates, e.g., issuing and revoking certificates.&lt;/p&gt;

&lt;h1 id=&quot;main-services&quot;&gt;Main services&lt;/h1&gt;

&lt;p&gt;The main services provided by PKI include:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Confidentiality
    &lt;ul&gt;
      &lt;li&gt;Data is protected from unauthorized entities.&lt;/li&gt;
      &lt;li&gt;By public key encryption and private key decryption&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Data integrity
    &lt;ul&gt;
      &lt;li&gt;Data could not be changed by unauthorized entities.&lt;/li&gt;
      &lt;li&gt;By digital signatures&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Authentication
    &lt;ul&gt;
      &lt;li&gt;Involved entities must prove who they are&lt;/li&gt;
      &lt;li&gt;By signing on authentication information&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Data origin authenticity
    &lt;ul&gt;
      &lt;li&gt;The origin of the data must be reliable.&lt;/li&gt;
      &lt;li&gt;By digital certificates and signatures&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Non-repudiation
    &lt;ul&gt;
      &lt;li&gt;Prevents involved entities from denying that they have performed some actions, e.g., some harmful actions.&lt;/li&gt;
      &lt;li&gt;By digital signatures&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;references&quot;&gt;References&lt;/h1&gt;

&lt;p&gt;[1] &lt;a href=&quot;http://www.amazon.com/Introduction-Public-Infrastructures-Johannes-Buchmann/dp/3642406564/ref=sr_1_1?ie=UTF8&amp;amp;qid=1456768775&amp;amp;sr=8-1&amp;amp;keywords=introduction+to+pki&quot;&gt;Introduction to Public Key Infrastructures&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;[2] &lt;a href=&quot;http://www.amazon.com/Understanding-Cryptography-Textbook-Students-Practitioners/dp/3642041000/ref=sr_1_1?s=books&amp;amp;ie=UTF8&amp;amp;qid=1456768821&amp;amp;sr=1-1&amp;amp;keywords=understanding+cryptography+a+textbook+for+students+and+practitioners&quot;&gt;Understanding Cryptography: A Textbook for Students and Practitioners&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;[3] &lt;a href=&quot;http://www.amazon.com/Understanding-PKI-Standards-Deployment-Considerations/dp/0321743091/ref=sr_1_1?ie=UTF8&amp;amp;qid=1456768907&amp;amp;sr=8-1&amp;amp;keywords=understanding+pki&quot;&gt;Understanding PKI: Concepts, Standards, and Deployment Considerations&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Thu, 25 Feb 2016 00:00:00 +0700</pubDate>
        <link>/public-key-infrastructure/</link>
        <guid isPermaLink="true">/public-key-infrastructure/</guid>
        
        
      </item>
    
      <item>
        <title>Programming Pearls</title>
        <description>
</description>
        <pubDate>Wed, 24 Feb 2016 00:00:00 +0700</pubDate>
        <link>/programming-pearls/</link>
        <guid isPermaLink="true">/programming-pearls/</guid>
        
        
      </item>
    
      <item>
        <title>Enterprise Integration Patterns</title>
        <description>
</description>
        <pubDate>Wed, 24 Feb 2016 00:00:00 +0700</pubDate>
        <link>/enterprise-integration-patterns/</link>
        <guid isPermaLink="true">/enterprise-integration-patterns/</guid>
        
        
      </item>
    
      <item>
        <title>EJB</title>
        <description>
</description>
        <pubDate>Wed, 24 Feb 2016 00:00:00 +0700</pubDate>
        <link>/ejb/</link>
        <guid isPermaLink="true">/ejb/</guid>
        
        
      </item>
    
      <item>
        <title>Software Architectures</title>
        <description>&lt;h1 id=&quot;the-java-ee-architects-handbook-2nd-edition&quot;&gt;The Java EE Architect’s Handbook, 2nd edition&lt;/h1&gt;

&lt;h2 id=&quot;chapter-4-designing-external-application-interfaces&quot;&gt;Chapter 4: Designing external application interfaces&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;External application interfaces define how our application interacts with the external ones.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Strategies to fetch external data
    &lt;ul&gt;
      &lt;li&gt;Read the database of the external application directly&lt;/li&gt;
      &lt;li&gt;Read the operational data store created from the external data. The data in these data stores can also be in a vendor-independent format so that changing the data stores will not affect our application.&lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Use JAX-WS web services supported by the external applications. The most important advantage of using web services is that it is platform-independent. Two applications written in different technologies can still talk to each other via web services. One disadvantage of JAX-WS is that it is not optimized to receive big data.&lt;/p&gt;

        &lt;blockquote&gt;
          &lt;p&gt;It is usually advisable to segregate code consuming or publishing web services from the rest of your application.&lt;/p&gt;
        &lt;/blockquote&gt;
      &lt;/li&gt;
      &lt;li&gt;Use JAX-RS web services. One disadvantage is that it does not hava a standard specification yet, as opposed to JAX-WS whose specification can be written in WSDL files.&lt;/li&gt;
      &lt;li&gt;Use messaging services, which are asynchronous communication methods. These services can be implemented by message-driven beans in Java EE. Main advantage is the asynchronousity, which can provide guaranteeed dilivery because we can retry if the calls were failed.&lt;/li&gt;
      &lt;li&gt;Use EJBs, but this limits the participants to use Java.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Common mistakes
    &lt;ul&gt;
      &lt;li&gt;Use database or file system as message broker. This means that the messages are put into the database or file system, and then there is another process which will read these messages from the database or file system and handle them.&lt;/li&gt;
      &lt;li&gt;Use asynchronous methods when their responses are required&lt;/li&gt;
      &lt;li&gt;Not tested on production environment&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Tue, 23 Feb 2016 00:00:00 +0700</pubDate>
        <link>/software-architectures/</link>
        <guid isPermaLink="true">/software-architectures/</guid>
        
        
      </item>
    
      <item>
        <title>Patterns of Enterprise Application Architecture</title>
        <description>
</description>
        <pubDate>Tue, 23 Feb 2016 00:00:00 +0700</pubDate>
        <link>/patterns-of-enterprise-application-architecture/</link>
        <guid isPermaLink="true">/patterns-of-enterprise-application-architecture/</guid>
        
        
      </item>
    
      <item>
        <title>Microservices</title>
        <description>
</description>
        <pubDate>Tue, 23 Feb 2016 00:00:00 +0700</pubDate>
        <link>/microservices/</link>
        <guid isPermaLink="true">/microservices/</guid>
        
        
      </item>
    
      <item>
        <title>JAX-WS in practice</title>
        <description>
</description>
        <pubDate>Tue, 23 Feb 2016 00:00:00 +0700</pubDate>
        <link>/jax-ws-in-practice/</link>
        <guid isPermaLink="true">/jax-ws-in-practice/</guid>
        
        
      </item>
    
      <item>
        <title>JAX-RS in practice</title>
        <description>&lt;h1 id=&quot;references&quot;&gt;References&lt;/h1&gt;
&lt;p&gt;[1] RESTful Java with JAX-RS 2.0, Bill Burke&lt;/p&gt;
</description>
        <pubDate>Tue, 23 Feb 2016 00:00:00 +0700</pubDate>
        <link>/jax-rs-in-practice/</link>
        <guid isPermaLink="true">/jax-rs-in-practice/</guid>
        
        
      </item>
    
  </channel>
</rss>
